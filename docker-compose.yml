version: '3.8'
services:
  core_service:
    build:
      context: .
      dockerfile: core_service/Dockerfile
      args:
        - MIGRATIONS_PATH=migrations
        - APP_PORT=${APP_PORT}
        - DATABASE_URL=${DATABASE_URL}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
      - APP_PORT=${APP_PORT}
      - RUST_LOG=${RUST_LOG}
      - SQLX_MAX_CONNECTIONS=${SQLX_MAX_CONNECTIONS}
      - SQLX_ACQUIRE_TIMEOUT=${SQLX_ACQUIRE_TIMEOUT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - austeris-network
    restart: unless-stopped

  postgres:
    image: postgres:17.5-alpine
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - austeris-network
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - austeris-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - austeris-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  austeris-network:
    driver: bridge
